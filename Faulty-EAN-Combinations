# Writes all rows with invalid EANs (per custom rules) to a new CSV with the same header. Helped us during a case to identify combinations of faulty EANs

import csv

def check_ean_rules(ean):
    if not ean:
        return False
    ean = ean.strip()
    if len(ean) == 6 and ean[:2] in ['20', '21', '22', '23', '24', '25', '26', '27', '28']:
        return True
    elif len(ean) == 8:
        if ean[:2] == '20':
            return True
        elif ean[:2] == '25':
            return True
        elif ean[:2] == '29' and ean not in ['29041084', '29400102', '29062362']:
            return True
    elif len(ean) == 11:
        return True
    elif len(ean) == 12:
        return True
    return False

def main():
    input_file_path = ''
    output_file_path = ''
    
    with open(input_file_path, mode='r', newline='', encoding='utf-8') as input_file:
        csv_reader = csv.DictReader(input_file, delimiter=';')
        fieldnames = csv_reader.fieldnames

        if not fieldnames:
            raise ValueError("No columns found in input CSV.")

        ean_col = next((f for f in fieldnames if 'ean' in f.lower() or 'gtin' in f.lower()), None)
        if ean_col is None:
            raise ValueError("No EAN/GTIN column found. Expected a column containing 'EAN' or 'GTIN' in its name.")

        with open(output_file_path, mode='w', newline='', encoding='utf-8') as output_file:
            csv_writer = csv.DictWriter(output_file, fieldnames=fieldnames, delimiter=';')
            csv_writer.writeheader()
            for row in csv_reader:
                ean_value = row.get(ean_col, '')
                if not check_ean_rules(str(ean_value) if ean_value is not None else ''):
                    csv_writer.writerow(row)

if __name__ == "__main__":
    main()
